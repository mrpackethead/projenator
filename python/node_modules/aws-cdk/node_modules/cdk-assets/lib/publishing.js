"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetPublishing = void 0;
const handlers_1 = require("./private/handlers");
const progress_1 = require("./progress");
class AssetPublishing {
    constructor(manifest, options) {
        this.manifest = manifest;
        this.options = options;
        /**
         * The message for the IPublishProgress interface
         */
        this.message = 'Starting';
        this.failures = new Array();
        this.completedOperations = 0;
        this.aborted = false;
        this.assets = manifest.entries;
        this.totalOperations = this.assets.length;
    }
    /**
     * Publish all assets from the manifest
     */
    async publish() {
        var _a;
        const self = this;
        const handlerHost = {
            aws: this.options.aws,
            get aborted() { return self.aborted; },
            emitMessage(t, m) { self.progressEvent(t, m); },
        };
        for (const asset of this.assets) {
            if (this.aborted) {
                break;
            }
            this.currentAsset = asset;
            try {
                if (this.progressEvent(progress_1.EventType.START, `Publishing ${asset.id}`)) {
                    break;
                }
                const handler = handlers_1.makeAssetHandler(this.manifest, asset, handlerHost);
                await handler.publish();
                if (this.aborted) {
                    throw new Error('Aborted');
                }
                this.completedOperations++;
                if (this.progressEvent(progress_1.EventType.SUCCESS, `Published ${asset.id}`)) {
                    break;
                }
            }
            catch (e) {
                this.failures.push({ asset, error: e });
                this.completedOperations++;
                if (this.progressEvent(progress_1.EventType.FAIL, e.message)) {
                    break;
                }
            }
        }
        if (((_a = this.options.throwOnError) !== null && _a !== void 0 ? _a : true) && this.failures.length > 0) {
            throw new Error(`Error publishing: ${this.failures.map(e => e.error.message)}`);
        }
    }
    get percentComplete() {
        if (this.totalOperations === 0) {
            return 100;
        }
        return Math.floor((this.completedOperations / this.totalOperations) * 100);
    }
    abort() {
        this.aborted = true;
    }
    get hasFailures() {
        return this.failures.length > 0;
    }
    /**
     * Publish a progress event to the listener, if present.
     *
     * Returns whether an abort is requested. Helper to get rid of repetitive code in publish().
     */
    progressEvent(event, message) {
        this.message = message;
        if (this.options.progressListener) {
            this.options.progressListener.onPublishEvent(event, this);
        }
        return this.aborted;
    }
}
exports.AssetPublishing = AssetPublishing;
//# sourceMappingURL=data:application/json;base64,