"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCandidateForHotswapping = exports.tryHotswapDeployment = void 0;
const cfn_diff = require("@aws-cdk/cloudformation-diff");
const aws_auth_1 = require("./aws-auth");
const common_1 = require("./hotswap/common");
const ecs_services_1 = require("./hotswap/ecs-services");
const evaluate_cloudformation_template_1 = require("./hotswap/evaluate-cloudformation-template");
const lambda_functions_1 = require("./hotswap/lambda-functions");
const stepfunctions_state_machines_1 = require("./hotswap/stepfunctions-state-machines");
/**
 * Perform a hotswap deployment,
 * short-circuiting CloudFormation if possible.
 * If it's not possible to short-circuit the deployment
 * (because the CDK Stack contains changes that cannot be deployed without CloudFormation),
 * returns `undefined`.
 */
async function tryHotswapDeployment(sdkProvider, assetParams, cloudFormationStack, stackArtifact) {
    // resolve the environment, so we can substitute things like AWS::Region in CFN expressions
    const resolvedEnv = await sdkProvider.resolveEnvironment(stackArtifact.environment);
    // create a new SDK using the CLI credentials, because the default one will not work for new-style synthesis -
    // it assumes the bootstrap deploy Role, which doesn't have permissions to update Lambda functions
    const sdk = await sdkProvider.forEnvironment(resolvedEnv, aws_auth_1.Mode.ForWriting);
    // The current resources of the Stack.
    // We need them to figure out the physical name of a resource in case it wasn't specified by the user.
    // We fetch it lazily, to save a service call, in case all hotswapped resources have their physical names set.
    const listStackResources = new LazyListStackResources(sdk, stackArtifact.stackName);
    const evaluateCfnTemplate = new evaluate_cloudformation_template_1.EvaluateCloudFormationTemplate({
        stackArtifact,
        parameters: assetParams,
        account: resolvedEnv.account,
        region: resolvedEnv.region,
        partition: (await sdk.currentAccount()).partition,
        urlSuffix: sdk.getEndpointSuffix,
        listStackResources,
    });
    const currentTemplate = await cloudFormationStack.template();
    const stackChanges = cfn_diff.diffTemplate(currentTemplate, stackArtifact.template);
    const hotswappableChanges = await findAllHotswappableChanges(stackChanges, evaluateCfnTemplate);
    if (!hotswappableChanges) {
        // this means there were changes to the template that cannot be short-circuited
        return undefined;
    }
    // apply the short-circuitable changes
    await applyAllHotswappableChanges(sdk, hotswappableChanges);
    return { noOp: hotswappableChanges.length === 0, stackArn: cloudFormationStack.stackId, outputs: cloudFormationStack.outputs, stackArtifact };
}
exports.tryHotswapDeployment = tryHotswapDeployment;
async function findAllHotswappableChanges(stackChanges, evaluateCfnTemplate) {
    let foundNonHotswappableChange = false;
    const promises = [];
    // gather the results of the detector functions
    stackChanges.resources.forEachDifference((logicalId, change) => {
        const resourceHotswapEvaluation = isCandidateForHotswapping(change);
        if (resourceHotswapEvaluation === common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT) {
            foundNonHotswappableChange = true;
        }
        else if (resourceHotswapEvaluation === common_1.ChangeHotswapImpact.IRRELEVANT) {
            // empty 'if' just for flow-aware typing to kick in...
        }
        else {
            promises.push([
                lambda_functions_1.isHotswappableLambdaFunctionChange(logicalId, resourceHotswapEvaluation, evaluateCfnTemplate),
                stepfunctions_state_machines_1.isHotswappableStateMachineChange(logicalId, resourceHotswapEvaluation, evaluateCfnTemplate),
                ecs_services_1.isHotswappableEcsServiceChange(logicalId, resourceHotswapEvaluation, evaluateCfnTemplate),
            ]);
        }
    });
    const changesDetectionResults = [];
    for (const detectorResultPromises of promises) {
        const hotswapDetectionResults = await Promise.all(detectorResultPromises);
        changesDetectionResults.push(hotswapDetectionResults);
    }
    const hotswappableResources = new Array();
    // resolve all detector results
    for (const hotswapDetectionResults of changesDetectionResults) {
        const perChangeHotswappableResources = new Array();
        for (const result of hotswapDetectionResults) {
            if (typeof result !== 'string') {
                perChangeHotswappableResources.push(result);
            }
        }
        // if we found any hotswappable changes, return now
        if (perChangeHotswappableResources.length > 0) {
            hotswappableResources.push(...perChangeHotswappableResources);
            continue;
        }
        // no hotswappable changes found, so any REQUIRES_FULL_DEPLOYMENTs imply a non-hotswappable change
        for (const result of hotswapDetectionResults) {
            if (result === common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT) {
                foundNonHotswappableChange = true;
            }
        }
        // no REQUIRES_FULL_DEPLOYMENT implies that all results are IRRELEVANT
    }
    return foundNonHotswappableChange ? undefined : hotswappableResources;
}
/**
 * returns `ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT` if a resource was deleted, or a change that we cannot short-circuit occured.
 * Returns `ChangeHotswapImpact.IRRELEVANT` if a change that does not impact shortcircuiting occured, such as a metadata change.
 */
function isCandidateForHotswapping(change) {
    // a resource has been removed OR a resource has been added; we can't short-circuit that change
    if (!change.newValue || !change.oldValue) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    // Ignore Metadata changes
    if (change.newValue.Type === 'AWS::CDK::Metadata') {
        return common_1.ChangeHotswapImpact.IRRELEVANT;
    }
    return {
        newValue: change.newValue,
        propertyUpdates: change.propertyUpdates,
    };
}
exports.isCandidateForHotswapping = isCandidateForHotswapping;
async function applyAllHotswappableChanges(sdk, hotswappableChanges) {
    return Promise.all(hotswappableChanges.map(hotswapOperation => {
        return applyHotswappableChange(sdk, hotswapOperation);
    }));
}
async function applyHotswappableChange(sdk, hotswapOperation) {
    // note the type of service that was successfully hotswapped in the User-Agent
    const customUserAgent = `cdk-hotswap/success-${hotswapOperation.service}`;
    sdk.appendCustomUserAgent(customUserAgent);
    try {
        return await hotswapOperation.apply(sdk);
    }
    finally {
        sdk.removeCustomUserAgent(customUserAgent);
    }
}
class LazyListStackResources {
    constructor(sdk, stackName) {
        this.sdk = sdk;
        this.stackName = stackName;
    }
    async listStackResources() {
        if (this.stackResources === undefined) {
            this.stackResources = await this.getStackResources();
        }
        return this.stackResources;
    }
    async getStackResources() {
        var _a;
        const ret = new Array();
        let nextToken;
        do {
            const stackResourcesResponse = await this.sdk.cloudFormation().listStackResources({
                StackName: this.stackName,
                NextToken: nextToken,
            }).promise();
            ret.push(...((_a = stackResourcesResponse.StackResourceSummaries) !== null && _a !== void 0 ? _a : []));
            nextToken = stackResourcesResponse.NextToken;
        } while (nextToken);
        return ret;
    }
}
//# sourceMappingURL=data:application/json;base64,